<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 动态代理：只写接口即可，不必写实现类
	1.namespace必须为代理接口的全路径
	2.sql的id必须为接口中方法的名称
	3.参数类型必须为接口中方法的参数类型
	4.返回值类型必须为接口中方法的返回值类型
 -->
<mapper namespace="com.test.mapper.UserMapper">

	<!-- 封装where条件 -->
	<sql id="user_where">
		<where>
			<if test="username != null and username != ''">
					and username like '%${username}%'
				</if>
				<if test="email != null and email != ''">
					and email like '%${email}%' 
			</if>
		</where>
		
	</sql>
	
	
<!-- id:sql语句的唯一标识符
		parameterType:指定传入参数的类型
		resultType:返回结果集的类型
	 -->
	<select id="findById" parameterType="java.lang.Integer" resultType="user">
		select * from user where userid = #{userid}
	</select>

	<!-- 若返回类型为集合，则返回值类型为泛型的类型 
		${}拼接字符串，若传入参数为基本类型，则内的变量必须为value:${value}
	-->
	<select id="findByName" parameterType="java.lang.String" resultType="user">
		select * from user where username like '%${value}%'
	</select>
	
	<!--#{}：若传入为基本类型，则必须为pojo对应的属性名称；
		parameterType:
		返回自增主键，可使用:select LAST_INSERT_ID()  
	 -->
	<insert id="insertUser" parameterType="com.test.pojo.User">
		<!--keyProperty:返回主键 放入传入参数的id 中保存
			order：相对于insert，在insert之前，为BEFORE ,之后，为AFTER
		  -->
		<selectKey keyProperty="userid" order="AFTER" resultType="java.lang.Integer">
			select LAST_INSERT_ID()
		</selectKey>
		insert into user ( username,email,password) values(#{username},#{email},#{password})
	</insert>
	
	<delete id="delUserById" parameterType="java.lang.Integer" >
		delete from user where userid = #{userid}
	</delete>

	<select id="findByVo" parameterType="com.test.pojo.QueryVo" resultType="user" >
		select * from user where username like '%${user.username}%' and email like '%${user.email}%'
	</select>

	<select id="findAllCount"  resultType="java.lang.Integer">
		select count(*) from user
	</select>
	
	<select id="findByDynSql" parameterType="user" resultType="user">
		select * from user 
		
		<!-- 调用条件语句 -->
		<include refid="user_where"></include>
		
		<!-- <if test="username != null and username != ''">
			and username like '%${username}%'
		</if>
		<if test="email != null and email != ''">
			and email like '%${email}%' 
		</if> -->
	</select>
	
	
</mapper>